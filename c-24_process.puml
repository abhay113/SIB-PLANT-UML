@startuml

participant ESB
Database "DB" as DB
Queue "MQ" as MQ
Database "Extenal DB" as FN

DB -> MQ : DB Trigger puts the Message in the MQ (PAYHUB.C24.SEND.IN)
MQ --> ESB : Returns the Message

ESB -> ESB : If mandatory fields are missing Throw Exception "Mandatory fields are not present"

ESB -> MQ: If LogReq = "Y" send message to EAI.MSGLOG.MGT.IN queue
MQ --> ESB: message inserted

ESB -> DB : Fetch XML payload from INWARD_TRN table based on TRANSACTION_ID
DB --> ESB : Returns data

ESB -> DB : Fetch SENDER_REF from TRANSACTION_PAYLOAD and INWARD_TRN table based on TRANSACTION_ID
DB --> ESB : Returns data

ESB -> DB : Fetch STS_LKP_CD from INWARD_TRN table based on TRANSACTION_ID
DB --> ESB : Returns data

ESB -> ESB : Convert the Data into BLOB format

alt UPDT_MSG_BLOB is NULL
    ESB -> ESB : Throw Exception "Status of Message is Invalid"
end

ESB -> ESB : Convert the Data into XMLNSC format

alt STS_LKP_CODE = 'CK_VERIFIED'
    ESB -> ESB : Update the TRANSACTION_PAYLOAD table with new XML payload
    DB --> ESB : returns update status
    alt SQLCODE <> 0 
        ESB -> ESB : Throw Exception "Failed to update IFSC code to database"
    end
end

alt TRANSACTION_TYPE = 'T'
    alt HOST = 'CORP'
        note right: Do nothing
    else HOST != 'CORP'
    
        ESB -> DB: SELECT LAST_ERR_CD, LAST_ERR_TXT FROM INWARD_TRN WHERE INWTRNID = INWTRNID
        DB --> ESB: Return LAST_ERR_CD, LAST_ERR_TXT

        alt LAST_ERR_CD = 'FCRA001' AND LAST_ERR_TXT = 'FCRA Restricted Foreign Donors'
            note right: Do nothing
        else
            loop for each Address in Remitter_Address[]
            ESB -> DB: CALL CHECK_DONOR
            DB --> ESB: Return DONOR_MSG
            alt DONOR_MSG = 'Success'
                ESB -> ESB: Increment senderAddrCount
            end
        end
    
    end

    
    ESB -> ESB: if DONOR_MSG = 'Success' Then THROW EXCEPTION (ISO0070001: FCRA Restricted Foreign Donors)
    
    ESB -> DB: SELECT SEQ_STAN_ID.NEXTVAL as STANID FROM DUAL
    DB --> ESB: Return STANID
    
    ESB -> ESB: if STANID is not valid THROW USER EXCEPTION (ISO0001101: Failed to Generate STANID)
    end

    ESB -> DB: SELECT BANK_CHARGES, BANK_STAX, SELF_OTHER_FLAG, BTRN_DATE FROM INWARD_TRN WHERE INWTRNID = INWTRNID
    DB --> ESB: Return BANK_CHARGES, BANK_STAX, SELF_OTHER_FLAG, BTRN_DATE

    ESB -> DB: SELECT SELF_OTHER_FLAG FROM INWARD_TRN TABLE
    DB --> ESB: Return SELF_OTHER_FLAG
    alt SELF_OTHER_FLAG = 'T'
        ESB -> DB: SELECT SUSPENSE_ACCNUM FROM DUAL
        DB --> ESB: Return SUSPENSE_ACCNUM
    
        alt Suspense Account is valid
            ESB -> ESB: Set Settlement and Beneficiary Account
        else
            ESB -> ESB: THROW USER EXCEPTION (ISO0061303: Invalid Suspense Acc Number)
        end
    else
        ESB -> ESB: THROW USER EXCEPTION (ISO0001203: Invalid Flag for SELF/Other Bank Transaction)
    end

    ESB -> DB: SELECT FINACLE_ACC_NO FROM SENDER_MASTER TABLE
    DB --> ESB: Return FINACLE_ACC_NO

    alt Vostro Account Found
        ESB -> ESB: Set AccountIdentification1
    else
        ESB -> ESB: THROW USER EXCEPTION (ISO0001401: Failed to Get Vostro Account Number)
    end


else TransactionType !='T'
    ESB -> DB : Fetch GET_LKPCD(HOST_TYPE_LKP_ID) as HOST from EXCHANGE_HOUSE_MASTER and SENDER_MASTER 
    DB --> ESB : Returns Data
    ESB -> DB : Fetch LAST_ERR_CODE AND LAST_ERR_TEXT from INWARD_TXN
    DB --> ESB : Returns Data

    alt HOST = 'CORP'
        note right: Do nothing
    else HOST != 'CORP'    

    alt LAST_ERR_CD = 'FCRA001' & LAST_ERR_TXT = 'FCRA Restricted Foreign Donors'
        note right: Do nothing
    else
        alt  TRANSACTION_TYPE = 'I'
            ESB -> DB: SELECT DONOR_NAME FROM imps_restricted_donors
            DB --> ESB: returns DONOR_NAME
        else 
            ESB -> DB: SELECT DONOR_NAME FROM neft_restricted_donors
            DB --> ESB: returns DONOR_NAME
        end
        loop for each Address in Remitter_Address[]
            ESB -> DB: CALL CHECK_DONOR
            DB --> ESB: Return DONOR_MSG
        end 
        
        ESB -> ESB: if DONOR_MSG = 'Success' Then THROW EXCEPTION (ISO0070001: FCRA Restricted Foreign Donors)
    end 

    ESB -> DB: SELECT SEQ_STAN_ID.NEXTVAL as STANID FROM DUAL
    DB --> ESB: STANID result
   
    ESB -> ESB: If STANID result not found THROW USER EXCEPTION ('ISO_PARSING_FAILED', 'ISO0001101', 'Failed to Generate STANID )

    ESB -> DB: SELECT VAN_TXN_YN FROM INWARD_TRN TABLE
    DB --> ESB: VAN_TXN_YN result

    alt If VAN_TXN_YN result found

        alt If VAN_TXN_YN = 'Y'
            ESB -> DB: SELECT VAN_ACC_NO AS BENEFICIARY_ACC, BANK_CHARGES, BANK_STAX, SELF_OTHER_FLAG, BTRN_DATE, CBS_REF_VALUE1, RTGS_NEFT_TRN_ID FROM INWARD_TRN Table
        else
            ESB -> DB: SELECT BENEFICIARY_ACC, BANK_CHARGES, BANK_STAX, SELF_OTHER_FLAG, BTRN_DATE, CBS_REF_VALUE1, RTGS_NEFT_TRN_ID FROM INWARD_TRN table
        end
        DB --> ESB: return INWARD_TRN data
    else

        ESB -> ESB: THROW USER EXCEPTION ('ISO_PARSING_FAILED', 'ISO0001201', 'Failed to Get Beneficiary Account Number )
    end

    alt If CBS_REF_VALUE1 = '1420'
        ESB -> ESB: (If SELF_OTHER_FLAG != 'N' OR Transaction_Type != 'I')  THROW USER EXCEPTION ('ISO_PARSING_FAILED', 'ISO001261', 'Invalid state of transaction.')
    end

    ESB -> DB: SELECT SELF_OTHER_FLAG FROM INWARD_TRN 
    DB --> ESB: return SELF_OTHER_FLAG

    alt SELF_OTHER_FLG = 'S'
        ESB -> DB: SELECT FINACLE_ACC_NO, ACC_NAME, SCH_TYPE, IS_LOAN, IS_INSTI FROM CBS_ACC_MAPPER WHERE FINACLE_ACC_NO = Environment.INWTRN_DTL.BENEFICIARY_ACC
        DB --> ESB : return Data

        ESB -> ESB: if data not found THROW ISO_PARSING_FAILED (Account details not found)

    else SELF_OTHER_FLG = 'I'
            ESB -> DB: SELECT GET_PARAM_VALUE('IMPS','SETTLMENT_AC') AS IMPSACCNUMBER FROM DUAL
            DB --> ESB: return IMPSACCNUMBER
            
            ESB -> ESB: if IMPSACCNUMBER not found then THROW ISO_PARSING_FAILED (Invalid IMPS Settlement Acc Number)
    
    else SELF_OTHER_FLG = 'N' OR SELF_OTHER_FLG = 'R'
        ESB -> DB: CALL Check_SFMSPI_Window(INWTRNID, GATEWAY, RTN_WINDOW_STATUS)
        DB --> ESB : Method invoked
        alt RTN_WINDOW_STATUS = 'FAIL'
            ESB -> ESB: THROW ISO_PARSING_FAILED (GATEWAY working window not available)
        end
        ESB -> ESB: CALL GET_SETTLMENT_AC(INWTRNID, TRNTYPE, SETTLEMENT_AC)
        DB --> ESB : Method invoked
    else 
        ESB -> ESB: THROW ISO_PARSING_FAILED (Invalid Flag for SELF/Other Bank Transaction)
    end    
    

    ESB -> DB: SELECT SDMC_FLAG FROM SENDER_MASTER based on SENDER_CD
    DB --> ESB: return SDMC_FLAG
    ESB -> DB: SELECT INWTRN.FILE_ID, SM.FINACLE_ACC_NO, SM.SENDER_NAME, SM.SENDER_ID FROM SENDER_MASTER and INWARD_TRN
    DB --> ESB: return Data
    
    ESB -> ESB : if Data not found  Throw ISO_PARSING_FAILED (Failed to Get Vostro Account Number)
    
    alt SDMC_FLAG = 'Y'
        ESB -> DB: SELECT GET_PARAM_VALUE('SINGLE_DEBIT','SUSPENSE_AC') AS SUSPENSEACCNUM FROM DUAL
        DB --> ESB: Return SUSPENSEACCNUM

        ESB -> ESB : if SUSPENSEACCNUM not found THROW ISO_PARSING_FAILED (Invalid SUSPENSE Acc Number)
    end

    ESB -> ESB: Process Transaction Amount (TRN_AMT)
    alt CHARGES_AMT > 0
        ESB -> ESB: Calculate and set BankFee
    end

    alt HOST = 'CORP'
        ESB -> ESB: Set PURPOSECD = 'P1301'
    else
        ESB -> DB: SELECT PURPOSECD_CHECK_YN FROM SENDER_MASTER JOIN EXCHANGE_HOUSE_MASTER WHERE SENDER_CD=?
        DB --> ESB: PURPOSE
        alt PURPOSE = 'Y'
            ESB -> ESB: Set PURPOSECD from InputRoot
        else
            ESB -> ESB: Set PURPOSECD = 'P1301'
        end
    end 

    
    ESB -> ESB: if  Transaction_Type = 'N' then Set Remitter_Name for NEFT

    ESB -> DB: SELECT FILE_NAME FROM INWARD_FILES WHERE FILE_ID=?
    DB --> ESB: return FILE_NAME

    alt SELF_OTHER_FLG = 'I'
        ESB -> ESB: Process ReservedForPrivateUse125 with 'PHB-IBD'
    else
        alt HOST = 'CORP'
            ESB -> DB: SELECT CBS_REPORT_CD FROM EXCHANGE_HOUSE_MASTER JOIN SENDER_MASTER WHERE SENDER_ID=?
            DB --> ESB: return CBS_REPORT_CD
            ESB -> ESB: Process ReservedForPrivateUse125 with REPORT_CD
        else
            ESB -> DB: SELECT CBS_REPORT_CD FROM EXCHANGE_HOUSE_MASTER JOIN SENDER_MASTER WHERE SENDER_ID=?
            DB --> ESB: return CBS_REPORT_CD
            ESB -> ESB: Process ReservedForPrivateUse125 with REPORT_CD and 'FI'
        end
    end
end

' validation stars here 

alt ISO_MSG_TYPE is NULL 
    ESB -> ESB : Throw Error 'ISO Validation Failed : MessageType not Found'    
else ISO_MSG_TYPE != 4 
    ESB -> ESB : Throw Error 'ISO Validation Failed : MessageType should be 4 digit'
end


ESB -> ESB : if ISO_TRANSACTION_TYPE is NULL or length of ISO_TRANSACTION_TYPE <2 then Throw Error 'ISO Validation Failed : TansactionTpye not found'

ESB -> ESB : if SystemTraceAuditNumber is NULL Or < 1  Throw Error 'ISO Validation Failed : STANID not found'

ESB -> ESB : if Transaction_Amount <= 0  then  Throw Error 'ISO Validation Failed : Amount Cannot be less than  0'

alt TransactionCurrencyCode is NULL    
    ESB -> ESB : Throw Error 'ISO Validation Failed : Country Code not found'
else length of TransactionCurrencyCode != 3     
     ESB -> ESB : Throw Error 'ISO Validation Failed :  Currency Code should be of THREE characters'
end

alt length of AccountIdentification1 = 0
    ESB -> ESB : Throw Error 'ISO Validation Failed : First Account Activation code not found'
else length of AccountIdentification1 !=38
    ESB -> ESB : Throw Error 'ISO Validation Failed : First Account Activation code should be 38 characters'
end

alt length of AccountIdentification2 = 0
    ESB -> ESB : Throw Error 'ISO Validation Failed : Second Account Activation code not found'
else length of AccountIdentification1 !=40
    ESB -> ESB : Throw Error 'ISO Validation Failed : Second Account Activation code should be 40 characters'
end

alt DeliveryChannelControllerId is NULL 
    ESB -> ESB : Throw Error 'ISO Validation Failed : Delivery Channel Controller ID  not found.'
else length of DeliveryChannelControllerId != 3
    ESB -> ESB : Throw Error 'ISO Validation Failed : Delivery Channel Controller ID should be of 3 characters'
end

ESB -> ESB : map the input fields to XMLNSC format

ESB -> ESB: Convert Input XML to Bitstream
ESB -> ESB: Set MessageType to 'ISO8583_1987'
ESB -> ESB: Create DFDL Structure
ESB -> DB: Remove Unrequired XML Attributes
ESB -> ESB: Populate Primary Bitmap
ESB -> ESB: Check if Secondary Bitmap is Required
alt Secondary Bitmap Required
    ESB -> ESB: Create and Populate Secondary Bitmap
    ESB -> ESB: Set PrimaryBitmap.Bit001 to 1
else No Secondary Bitmap
    ESB -> ESB: Set PrimaryBitmap.Bit001 to 0
end
ESB -> ESB: Update Bitmaps Based on Available Fields
ESB -> ESB: Convert DFDL Structure to Bitstream
ESB -> ESB: Return TRUE

' 4th subflow

ESB -> ESB: convert the fields in BLOB format
ESB -> ESB:if INWTRNID =0 then THROW Exception ('Invalid Inward Transaction ID')

ESB -> DB : SELECT SEQ_INW_PAYLOAD.NEXTVAL as PAYLOAD_SEQ FROM dual
DB -> ESB : return PAYLOAD_SEQ
ESB -> ESB: if Payload Sequence Number not generated then  THROW Exception ('Payload Sequence Number cannot be generated')

ESB -> DB: INSERT INTO TRANSACTION_PAYLOAD (PAYLOAD_ID, INW_TRN_ID, PAYLOAD, CREATED_BY, CREATED_ON)
DB --> ESB: Data inserted

ESB ->ESB : if insertion failed THROW Exception ('SQL Error in INSERT TRANSACTION_PAYLOAD')

ESB -> DB : Select SELF_OTHER_FLAG, CONS_TRN_ID FROM INWARD_TRN WHERE INW_TRN_ID=?
DB --> ESB : return data


alt SDMC_FLAG = 'Y' and SELF_OTHER_FLAG <> 'T'
    ESB -> DB : SELECT CBS_REF_VALUE5 FROM INWARD_TRN 
    DB -> ESB : return CBS_REF_VALUE5
end

alt OtherBank_Return
    ESB -> DB: Update INWARD_TRN with C24_SEND status, ISO_PAYLOAD_ID, MsgType, and StanID
    DB --> ESB: Return update confirmation
else 
    ESB -> DB: Update INWARD_TRN with C24_SEND status, MsgType, StanID, LocalTransDT, PrimAccNo, AccIdent1, AccIdent2, and ISO_PAYLOAD_ID
    DB --> ESB: Return update confirmation
end

ESB -> ESB : if update failed throw Exception 'Failed to update the status of the Message'






@enduml
